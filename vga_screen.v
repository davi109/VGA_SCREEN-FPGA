
//=======================================================
//  This code is generated by Terasic System Builder
//=======================================================
`timescale 1ns / 1ps

module vga_screen(
	//////////// CLOCK //////////
	input MAX10_CLK1_50,

	//////////// KEY //////////
	input [1:0] KEY,

	//////////// SW //////////
	input [9:0] SW,

	//////////// VGA //////////
	output reg [3:0] VGA_B,
	output reg [3:0] VGA_G,
	output reg VGA_HS,
	output reg [3:0] VGA_R,
	output reg VGA_VS
);


//=======================================================
//  REG/WIRE declarations
//=======================================================

reg [14:0] hcount = 0;
reg [14:0] vcount = 0;
reg enable;
wire res;
reg [13*8:0] sw_0;
reg [13*8:0] sw_1;
reg [13*8:0] sw_2;
reg [13*8:0] sw_3;
reg [13*8:0] sw_4;
reg [13*8:0] sw_5;
reg [13*8:0] sw_6;
reg [13*8:0] sw_7;
reg [13*8:0] sw_8;
reg [13*8:0] sw_9;
reg [13*8:0] bt_0;
reg [13*8:0] bt_1;

parameter H_SCREEN 		= 800;
parameter H_FRONT_PORCH = H_SCREEN+56;
parameter H_SYNC_PULSE 	= H_FRONT_PORCH+120;
parameter H_BACK_PORCH 	= H_SYNC_PULSE+64;

parameter V_SCREEN 		= 600;
parameter V_FRONT_PORCH = V_SCREEN+37;
parameter V_SYNC_PULSE 	= V_FRONT_PORCH+6;
parameter V_BACK_PORCH 	= V_SYNC_PULSE+23;


//=======================================================
//  Structural coding
//=======================================================

always @(posedge MAX10_CLK1_50)
begin
	// ao chegar na direita da tela, reiniciar contador horizontal
	if(hcount == H_BACK_PORCH-1)
	begin
		hcount <= 0;
		// ao chegar em baixo da tela, reiniciar contador vertical
		if(vcount == V_BACK_PORCH-1)
			vcount <= 0;
		else
			vcount <= vcount+1'b1;
	end
	else
		hcount <= hcount+1'b1;
 
	// enviar 0 para vertical sync quando dentro do intervalo
	if (vcount >= V_FRONT_PORCH && vcount < V_SYNC_PULSE)
		VGA_VS <= 1'b0;
	else
		VGA_VS <= 1'b1;

	// enviar 0 para horizontal sync quando dentro do intervalo
	if (hcount >= H_FRONT_PORCH && hcount < H_SYNC_PULSE)
		VGA_HS <= 1'b0;
	else
		VGA_HS <= 1'b1;
end

always @(posedge MAX10_CLK1_50)
begin
	//// DECLARING BUTTONS VALUES ////

	if (SW[0])
		sw_0 <= "ON ";
	else
		sw_0 <= "OFF";
		
	if (SW[1])
		sw_1 <= "ON ";
	else
		sw_1 <= "OFF";
	
	if (SW[2])
		sw_2 <= "ON ";
	else
		sw_2 <= "OFF";
		
	if (SW[3])
		sw_3 <= "ON ";
	else
		sw_3 <= "OFF";
	
	if (SW[4])
		sw_4 <= "ON ";
	else
		sw_4 <= "OFF";
		
	if (SW[5])
		sw_5 <= "ON ";
	else
		sw_5 <= "OFF";

	if (SW[6])
		sw_6 <= "ON ";
	else
		sw_6 <= "OFF";
	
	if (SW[7])
		sw_7 <= "ON ";
	else
		sw_7 <= "OFF";
		
	if (SW[8])
		sw_8 <= "ON ";
	else
		sw_8 <= "OFF";
	
	if (SW[9])
		sw_9 <= "ON ";
	else
		sw_9 <= "OFF";
		
	if (KEY[0])
		bt_0 <= "OFF";
	else
		bt_0 <= "ON ";

	if (KEY[1])
		bt_1 <= "OFF";
	else
		bt_1 <= "ON ";
end

wrapper tes(
	MAX10_CLK1_50,
	sw_0,
	sw_1,
	sw_2,
	sw_3,
	sw_4,
	sw_5,
	sw_6,
	sw_7,
	sw_8,
	sw_9,
	bt_0,
	bt_1,
	hcount, // posição horizontal atual
	vcount, // posição vertical atual
	res 	// resultado. retorna 1 se o pixel deve ser ligado, 0 senão.
);

always @(posedge MAX10_CLK1_50)
begin
	// se estiver dentro da área desenhável da tela
	if((vcount < V_SCREEN && hcount < H_SCREEN) && res == 1)
	begin
		VGA_G <= 4'b1;
		VGA_B <= 4'b1;
		VGA_R <= 4'b1;
	end
	else //vazio
	begin
		VGA_G <= 4'b0;
		VGA_B <= 4'b0;
		VGA_R <= 4'b0;
	end
end

endmodule
